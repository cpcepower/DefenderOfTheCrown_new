;*****************************************************************************;BIBLI.ASM                                                                   *;Bibliotheque de routines polyvalentes                                       *;*****************************************************************************;AIGUILLE - Aiguillage du programme selon une table de sous-programmes;   INPUT - A -> Numero du sous-programme;           HL-> Adresse de la table;;RND      - Calcul d'une valeur aleatoire entre 1 et A;   INPUT - A -> Valeur maximum;   OUTPUT- A -> Nombre aleatoire entre 1 et la valeur maxi;;GETVAR   - Lecture de la variable courante;   INPUT - IX-> Pointeur des variables;   OUTPUT- HL-> Valeur de la variable;           IX-> Pointeur sur variable suivante;;RDTAB16  - Lecture d'une table de mots 16 bits;   INPUT - HL-> Adresse de la table;           A -> Numero de la valeur;   OUTPUT- HL-> Valeur;;RDTAB    - Lecture d'un tableau;   INPUT - HL-> Adresse debut tableau;           DE-> Longueur d'un element;           A -> Numero de la case;   OUTPUT- HL-> Valeur;   Modifies - HL;;GETSTR   - Acces a une chaine dans un tableau;   INPUT - HL-> Adresse du debut du tableau;           A -> Numero de la chaine recherchee;   OUTPUT- HL-> Adresse de la chaine recherchee;;GETJOY   - Lecture de l'etat du joystick;   OUTPUT- A -> Etat du joystick;;REPONOFF - Commutation du mode repeat;;WAIT_PAUSE    - Attend pendant A secondes ou jusqu'a la pression d'une touche;   EXIT  - NOT ZERO-> Touche pressee;   Modifies - A;;DIMINUE  - Diminue une valeur selon un pour256tage;   INPUT - HL-> Valeur initiale;           B -> Pour256tage;   OUTPUT- HL-> Nouvelle valeur;;MULT     - Multiplie un 16 bits par un 8 bits;   INPUT - HL-> Multiplicande;           B -> Multiplicateur;   OUTPUT- HL-> Resultat;;DIV      - Divise un 16 bits par un 8 bits;   INPUT - HL-> Dividande;           B -> Diviseur;   OUTPUT- HL-> Resultat;;MILPAUSE-    Pause en dixiemes de secondes;INPUT   -    A -> Nombre de dixiemes;;PRINT   -    Affiche le texte place apres l'appel (0=FIN);   Compilation conditionnee par _PRINT;;DEBUG   -;*******************************************************************************;;MILPAUSE;   Pause de A centiemes;MILPAUSE         EI         PUSH AF         PUSH BC         LD   B,AMILPAUS0	HALT:HALT:HALT         DJNZ MILPAUS0         POP  BC         POP  AF         RET;;;AIGUILLE;Appelle le Aieme sous-programme dans la table pointee par HL;AIGUILLE         DEC  HL         DEC  HL         CALL RDTAB16         JP   (HL);;RND;Renvoie dans A une valeur aleatoire entre 1 et A;; returns pseudo random 8 bit number in A. Only affects A.; (r_seed) is the byte from which the number is generated and MUST be; initialised to a non zero value or this function will always return; zero. Also r_seed must be in RAM, you can see why......; 34 -> 159 - original 47 -> xxxrnd:	push bc	ld c,a	ld	a,r	and	#b8		; mask non feedback bits	scf			; set carry	jp	po,no_clr	; skip clear if odd	ccf			; complement carry (clear it)no_clrr_seed equ $ +1	ld	a,1		; prng seed byte (must not be zero)	rla			; rotate carry into byte	ld	(r_seed),a	; save back for next prn; optim -> reduced at max %00011111 &1f = 31; max call in dotc-> a=21	and %00011111rnd_reduce	sub c	jr nc,rnd_reduce	add c	inc a	pop bc	ret			; done;;GETVAR;Renvoie dans HL l'adresse de la variable courante et decale le pointeur IX;de la pile des variables sur la variable suivante;GETVAR         LD   L,(IX+00)         LD   H,(IX+01)         INC  IX         INC  IX         RET;;;RDTAB16;Renvoie dans HL la Aieme valeur sur 16 bits de la table pointee par HL;RDTAB16; Input - a = 0 -> 127 - hl = table ptr; Ouput - hl =          PUSH AF	add a,a	add a,l	ld l,a	adc a,h	sub a,l	ld h,a         LD   A,(HL)         INC  HL         LD   H,(HL)         LD   L,A         POP  AF         RET;;RDTAB;RDTAB         PUSH AFRDTABCL  DEC  A         JR   Z,RDTABF         ADD  HL,DE         JR   RDTABCLRDTABF   POP  AF         RET;;;GETSTR;GETSTR         PUSH AF         PUSH BC         LD   B,A         LD   A,#FFGETSTR0  DEC  B         JR   Z,GETSTR3GETSTR1  CP   (HL)         INC  HL         JR   Z,GETSTR0         JR   GETSTR1GETSTR3  POP  BC         POP  AF         RET;;;GETJOY;   Renvoie dans A l'etat du joystick (0->U 1->D 2->L 3->R);   La Carry mise indique une pression sur FIRE;LASTJOY  DEFS 1KEYTAB   DEFB 18,6,47,9,1,8,2,0GETJOY         PUSH HL         PUSH BC         LD   HL,KEYTAB         LD   B,#01GETJOY0  LD   A,(HL)         PUSH HL         CALL #BB1E          ;KM TEST KEY         POP  HL         JR   Z,GETJOY1         SCFGETJOY1  RL   B         INC  HL         JR   NC,GETJOY0         CALL #BB24          ;KM GET JOYSTICK         OR   B         LD   C,A         LD   HL,LASTJOY         LD   A,(HL)         LD   (HL),C         XOR  C         LD   B,AKEY_REPEAT      equ $+1         LD   A,0         OR   B         AND  C              ;new AND ((old XOR new) OR repeat)         LD   C,A         LD   A,(HL)         AND  #0F         OR   C         CP   #10            ;Met CARRY si FIRE         CCF         POP  BC         POP  HL         RET;;REPONOFF- Change le mode repeat;REPONOFF         PUSH AF         LD   A,(KEY_REPEAT)         XOR  #FF         LD   (KEY_REPEAT),A         POP  AF         RET;;;WAIT_PAUSE - Attend A secondes ou jusqu'a la pression d'une touche;WAIT_PAUSE         PUSH AF         EI         PUSH HL         PUSH BC         LD   B,AWAIT_PAUSE0   LD   HL,300WAIT_PAUSE1   HALT         CALL GETJOY         JR   C,WAIT_PAUSEF         DEC  HL         LD   A,H         OR   L         JR   NZ,WAIT_PAUSE1         DJNZ WAIT_PAUSE0WAIT_PAUSEF   POP  BC         POP  HL         POP  AF         RET;;DIMINUE;DIMRESU  EQU  TAMPON         ;3;DIMINUE         PUSH AF         PUSH BC         PUSH DE         PUSH IX         PUSH HL         LD   IX,DIMRESU         LD   (IX+00),0         LD   (IX+01),0         LD   (IX+02),0         LD   C,B         LD   B,8         LD   E,0DIMBCLE  SRL  C         JR   NC,DIMNOCAR         LD   A,(IX+00)         ADD  A,L         LD   (IX+00),A         LD   A,(IX+01)         ADC  A,H         LD   (IX+01),A         LD   A,(IX+02)         ADC  A,E         LD   (IX+02),ADIMNOCAR SLA  L         RL   H         RL   E         DJNZ DIMBCLE         POP  HL         LD   DE,(DIMRESU+1)         OR   A         SBC  HL,DE         POP  IX         POP  DE         POP  BC         POP  AF         RET;MULT         PUSH DE         PUSH BC         EX   DE,HL         LD   HL,0         LD   C,B         LD   B,8MULTBCLE RR   C         JR   NC,MULTNO         ADD  HL,DE         JR   NC,MULTNO         OR   A         SBC  HL,DE         RETMULTNO   SLA  E         RL   D         DJNZ MULTBCLE         POP  BC         POP  DE         RET;DIV         LD   A,L         LD   L,H         LD   H,0         LD   D,B         LD   E,0         CALL DIV0         PUSH HL         LD   L,A         CALL DIV0         LD   A,L         POP  HL         LD   H,L         LD   L,A         RETDIV0         LD   B,8DIVBCL   ADD  HL,HL         OR   A         SBC  HL,DE         INC  HL         JR   NC,NXT         ADD  HL,DE         DEC  HLNXT      DJNZ DIVBCL         RET;;PRINT(Texte apres l'appel);    IF _PRINT;PRCOL    DEFB 0;PRINT         EX   (SP),HL         PUSH AFPRINT0   LD   A,(HL)         INC  HL         CALL PRINCOL         CP   #FF         JR   Z,PRINT1         CALL #BD2B         JR   PRINT0PRINT1   LD   A,#0D         CALL #BD2B     ; MC PRINT CHAR         PUSH BC         LD   A,(PRCOL)         LD   B,APRINT2   LD   A," "         CALL #BD2B     ; MC PRINT CHAR         DJNZ PRINT2         POP  BC         POP  AF         EX   (SP),HL         RETPRINCOL         PUSH AF         PUSH HL         LD   HL,PRCOL         INC  (HL)         LD   A,(HL)         CP   80         JR   NZ,PRINCOL1         LD   A,#0A         CALL #BD2B         XOR  A         LD   (HL),APRINCOL1 POP  HL         POP  AF         RET    ENDIF;;PCBUF    DEFS 2MEMZONE  DEFS 2;DBGAFF         EX   (SP),HL         LD   (PCBUF),HL         PUSH BC         LD   C,(HL)         INC  HL         LD   B,(HL)         INC  HL         LD   (MEMZONE),BC         POP  BC         EX   (SP),HL    IF _DEBUG         PUSH HL         PUSH AF        TXT_LOCATE 01, 16         CALL AFFMESS         DEFB "HL   BC   DE   AF"         DEFB #0A,#0D,#FF         CALL AFFDBLE         PUSH BC         POP  HL         CALL AFFDBLE         PUSH DE         POP  HL         CALL AFFDBLE         POP  HL         PUSH HL         CALL AFFDBLE         CALL AFFMESS         DEFB #0A,#0D         DEFB "PC   SP   IX   IY"         DEFB #0A,#0D,#FF         LD   HL,(PCBUF)         CALL AFFDBLE         LD   HL,0         ADD  HL,SP         CALL AFFDBLE         PUSH IX         POP  HL         CALL AFFDBLE         PUSH IY         POP  HL         CALL AFFDBLE         CALL AFFMESS         DEFB #0A,#0D         DEFB "ZONE DATA : "         DEFB #FF         LD   HL,(MEMZONE)         CALL AFFDBLE         CALL AFFMESS         DEFB #0A,#0D,#FF         LD   HL,(MEMZONE)         PUSH BC         LD   BC,#0804DBGAFF0  PUSH BCDBGAFF1  LD   A,(HL)         CALL AFFH8         LD   A,(HL)         CP   32         JR   NC,DBGAFF2         LD   A,"."DBGAFF2         CALL TXT_OUTPUT         CALL AFFBLANC         INC  HL         DJNZ DBGAFF1         POP  BC         CALL AFFMESS         DEFB #0A,#0D,#FF         DEC  C         JR   NZ,DBGAFF0         POP  BC         LD   A,#FF         CALL WAIT_PAUSE         POP  AF         POP  HL    ENDIF         RETAFFDBLE  CALL AFFH16AFFBLANC LD   A," "         JP TXT_OUTPUTAFFH16   LD   A,H         CALL AFFH8         LD   A,LAFFH8    PUSH AF         SRL  A         SRL  A         SRL  A         SRL  A         CALL AFFDIGIT         POP  AF         AND  #0FAFFDIGIT ADD  A,"0"         CP   "9"+1         JR   C,AFFH80         ADD  A,"A"-"9"-1AFFH80         JP TXT_OUTPUT