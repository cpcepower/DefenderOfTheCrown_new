;;LINK.ASM;;;Declaration de la bibliotheque;	IFNDEF MAIN_JUMP	MACRO M_LINKF function, adr	function equ adr+3	ENDM	MACRO M_LINKFEND function, adr, asm_func_end	M_LINKF function, adr	asm_func_end equ adr+3	ENDM	ELSE	MACRO M_LINKF function, adr	jp function	ENDM	MACRO M_LINKFEND function, adr, asm_func_end	jp function	ENDM	ENDIF;;BIBLI.ASM;	M_LINKF AIGUILLE, DOTC_MAIN_START		;A-No ss-prog,HL-Adresse table	M_LINKF RANDOM, AIGUILLE		;A-Val max -> A-Valeur (0<A<Val max+1)	M_LINKF GETVAR, RANDOM		;IX-Table des variables -> HL-Variable	M_LINKF RDTAB16, GETVAR		;HL-Table,A-Indice -> HL-Adresse	M_LINKF RDTAB, RDTAB16		;HL-Table,DE-Taille valeurs,A-Indice -> HL-Adresse	M_LINKF GETSTR, RDTAB		;HL-Table,A-Indice -> HL-Chaine	M_LINKF GETJOY, GETSTR		; -> A-Etat joystick	M_LINKF WAIT_PAUSE, GETJOY	;A-Duree en s. -> NZ=Hit key	M_LINKF REPONOFF, WAIT_PAUSE	M_LINKF DIMINUE, REPONOFF	;HL-Valeur,B-Pourcentage -> HL-Valeur	M_LINKF MULT, DIMINUE	M_LINKFEND DIV, MULT, BIBLI_FEND;;DISC.ASM;	M_LINKFEND READFILE, BIBLI_FEND,DISC_FEND	;HL-Nom fichier,DE-Adresse dimplantation						; -> BC-Longueur,DE-Adresse octet suivant;;FLECHE.ASM;	M_LINKF AFLECHE, DISC_FEND	M_LINKF EFLECHE, AFLECHE	M_LINKF GFLECH1, EFLECHE		; -> HL-Coordonnees de la fleche	M_LINKF GFLECH2, GFLECH1		; -> HL-Adresse ecran de la fleche	M_LINKF TFLECHE, GFLECH2		; -> A-Octet ecran pointe par la fleche	M_LINKFEND MFLECHE, TFLECHE, FLECHE_FEND	;C=Init speed -> A-Etat joystick;;MUSINT.ASM;	M_LINKF music_load, FLECHE_FEND		;HL-Nom fichier musique	M_LINKF music_off, music_load	M_LINKFEND music_on, music_off, MUSINT_FEND		;HL-Adresse musique;;SCR.ASM;	M_LINKF scr_load, MUSINT_FEND	;HL-Nom de l'ecran, de=memory address	M_LINKF scr_load_decomp, scr_load	;HL-Nom de l'ecran	M_LINKF set_image_pal, scr_load_decomp	M_LINKF sauv_image_pal, set_image_pal	M_LINKF blackout, sauv_image_pal	M_LINKF DECOMP, blackout	;HL-Adresse image compactee	M_LINKFEND SETFLASH, DECOMP, SCR_FEND;;SPRITE.ASM;	M_LINKF LUTINIT, SCR_FEND	M_LINKF LUTIN, LUTINIT		;A-No sprite,HL-Coordonnees -> A-No lutin	M_LINKF LUTON, LUTIN		;A-No lutin	M_LINKF LUTOFF, LUTON		;A-No lutin	M_LINKF LUTSAVE, LUTOFF		;A-No lutin	M_LINKF LUTMODV, LUTSAVE	;A-No lutin,HL-Coordonnees,B-No sprite	M_LINKF AFFSPR, LUTMODV		;A-No sprite,HL-Coordonnees	M_LINKF GETSPR, AFFSPR		;HL-Table sprites,A-No sprite					; -> HL-Sprite,B-Largeur,C-Hauteur	M_LINKF WHATREG, GETSPR		; -> C=Trouve,A-No region	M_LINKF SCRADD, WHATREG	M_LINKF NEXTLINE, SCRADD	M_LINKF AFFSPRB, NEXTLINE	M_LINKF AFFSPRC, AFFSPRB	M_LINKF ANIMATE, AFFSPRC	M_LINKF MILPAUSE, ANIMATE	M_LINKF ANIMATEB, MILPAUSE	M_LINKF GETLUT, ANIMATEB	M_LINKF LUTMSCR, GETLUT	M_LINKFEND AFFREG, LUTMSCR, SPRITE_FEND;;TXT.ASM;	M_LINKF TXT_SET_CURSOR, SPRITE_FEND	M_LINKF SCR_CHAR_POSITION, TXT_SET_CURSOR	M_LINKF MENUTEXT , SCR_CHAR_POSITION		;HL-Texte -> A-Option,HL-Octet apres texte	M_LINKF MENUSEL , MENUTEXT		; -> A-option	M_LINKF MENUTEX0 , MENUSEL	M_LINKF MENUREST , MENUTEX0	M_LINKF MENUTEX1 , MENUREST	M_LINKFEND TXT_OUTPUT, MENUTEX1, TXT_FEND;;DIVERS.ASM;	M_LINKF KILL     , TXT_FEND	M_LINKF GETREG   , KILL	M_LINKF GETLORD  , GETREG	M_LINKF LGETHOME , GETLORD	M_LINKF LGETYPE  , LGETHOME	M_LINKF LGETREG  , LGETYPE	M_LINKF LGETSOLD , LGETREG	M_LINKF LPUTSOLD , LGETSOLD	M_LINKF LGETCHEV , LPUTSOLD	M_LINKF LPUTCHEV , LGETCHEV	M_LINKF LGETCATA , LPUTCHEV	M_LINKF LPUTCATA , LGETCATA	M_LINKF LGETGOLD , LPUTCATA	M_LINKF LPUTGOLD , LGETGOLD	M_LINKF LGETWIFE , LPUTGOLD	M_LINKF RGETSOLD , LGETWIFE	M_LINKF RPUTSOLD , RGETSOLD	M_LINKF RGETCHEV , RPUTSOLD	M_LINKF RPUTCHEV , RGETCHEV	M_LINKF RGETCATA , RPUTCHEV	M_LINKF RPUTCATA , RGETCATA	M_LINKF RGETPROP , RPUTCATA	M_LINKF RGETBUIL , RGETPROP	M_LINKF LGETINC  , RGETBUIL	M_LINKF LGETARM  , LGETINC	M_LINKF ENCAISSE , LGETARM	M_LINKF PAYE     , ENCAISSE	M_LINKF TST_MONY , PAYE	M_LINKF PAYE_PC  , TST_MONY	M_LINKF RETIRE   , PAYE_PC	M_LINKF GO       , RETIRE	M_LINKF KADO     , GO	M_LINKF ISDEAD   , KADO	M_LINKF ISNORM   , ISDEAD	M_LINKF ISJOUEUR , ISNORM	M_LINKF LANDFREE , ISJOUEUR	M_LINKF GETLNAME , LANDFREE	M_LINKF GETRNAME , GETLNAME	M_LINKF PLACARD  , GETRNAME	M_LINKF AFFMAP   , PLACARD	M_LINKF CHOIXREG , AFFMAP	M_LINKF CHEMIN   , CHOIXREG	M_LINKF DEPLACE  , CHEMIN	M_LINKFEND CHOOSE, DEPLACE, DIVERS_FEND;; SQUELET.ASM;	M_LINKFEND EXECARTE , DIVERS_FEND, SQUELET_FEND;;ATTAK.ASM;	M_LINKF ATTAQUE , SQUELET_FEND	M_LINKF LORDHERE, ATTAQUE	M_LINKF LORDNEAR, LORDHERE	M_LINKF RAMENE  , LORDNEAR	M_LINKF TRANSFER, RAMENE	M_LINKF RAPATRIE, TRANSFER	M_LINKF AFFARM  , RAPATRIE	M_LINKF AFFINC  , AFFARM	M_LINKF AFFLAND , AFFINC	M_LINKFEND LGETPREF, AFFLAND, ATTAK_FEND	IFNDEF MAIN_JUMP;;DATADAT EQU ATTAK_FEND+3RETSIEGE EQU  DATANIBUF   EQU  DAT+2LORD     EQU  DAT+4;LUTTAB   EQU  DAT+6SAVEBUF equ DAT+6TAMPON		equ DAT+8	ENDIF