; ------------------------------------------------------------------------------; from ATTAK.ASM; ---------------------------; Gestion des attaques d'une region par un lord.;;ATTAQUE(B-Lord,C-Reg) -> CARRY si fin (A-1->gagne,2->perdu);attack_lord		ds 1attack_region		ds 1defending_lord		ds 1defending_region	ds 1armee			ds 2; ---------------------------attaque; ---------------------------	push bc	push de	push hl	push ix	push iy	call att_par	call att_mess	call att_defr	call att_tran	call att_cast	call att_comb	jr c,atti_won	jr z,atti_los	call att_retr	jr att_endatti_won call att_won	jr att_endatti_los call att_lostatt_end	push af	call affinc	pop af	pop iy	pop ix	pop hl	pop de	pop bc	ret; ---------------------------; initialisation des variablesatt_par; ---------------------------	ld a,b	ld (attack_lord),a	call lgetreg	ld (attack_region),a	ld a,c	ld (defending_region),a	call rgetprop	ld (defending_lord),a	ret; ---------------------------; affichage du messageatt_mess; ---------------------------	call iso_vier	ret z	call isd_jou	jr nz,no_djou	call iso_nob	jr nz,no_embu	call z,iso_prot	ret nz	ld a,(defending_region)	call getrname	push hl	ld a,(attack_lord)	call getlname	push hl	ld hl,embusc	jr yemessno_embu	call iso_garn	jr nz,no_garn	call iso_prot	jr z,ye_garn	call iso_near	jr nz,no_djouye_garn ld a,(attack_lord)	call getlname	push hl	ld a,(defending_region)	call getrname	push hl	ld hl,garnison	jr yemessno_garn	call iso_home	ret nz	ld a,(attack_lord)	call getlname	push hl	ld hl,homeattyemess ld a,5	call placard	retno_djou	call isa_jou	ret nz	call iso_prot	ret nz	ld a,(defending_lord)	call getlname	push hl	ld hl,discov	jr yemess; ---------------------------; retour du defenseuratt_defr; ---------------------------	call iso_nob	ret z	call iso_near	ret nz	call isd_jou	jr nz,comnoj	call wish	ld a,(defending_region)	call c,ramene	retcomnoj call isa_jou	jr nz,comnoj2	ld a,(defending_lord)	call getlname	push hl	ld hl,comeback	ld a,5	call placardcomnoj2 ld a,(defending_region)	call ramene	ret; ---------------------------; transfert de l'armee du defenseuratt_tran; ---------------------------	call iso_vier	ret z	call iso_prot	ld a,(defending_region)	call z,transfer	ret; ---------------------------; mise en place castresiatt_cast; ---------------------------	xor a	ld (castresi),a	call iso_nob	ret z	call isa_jou	jr nz,nosiege;	call BUFMUS+3	 ;stoppe le bruit	ld a,(defending_lord)	 ;jeu de la catapulte	ld b,a	ld a,(defending_region)	ld c,a	ld a,(attack_lord)	call runfile	dw siege	ld (castresi),a	ld hl,filename_event	ld de,bufovl	call readfil2;	ld hl,sons;	ld de,BUFMUS;	jp readfil2	retnosiege ld a,7	call random	add a,3	ld (castresi),a	call isd_jou	ret nz	call iso_home	jr z,yeshow	call iso_prot	ret nzyeshow ld a,(castresi)	call showcast	ret; ---------------------------; execution du combatatt_comb; ---------------------------	call isa_jou	jr nz,no_inc0	ld a,(defending_lord)	or a	call nz,linchateno_inc0 ld a,(attack_lord)	call lgetarm	ld (armee),hl	ld a,(attack_lord)	call getlord	ld a,(defending_region)	call getreg	ld hl,castresi	call EXEC_BATTLE	push af	call affarm	call iso_vier	jr nz,pasvier	ld a,(defending_region)	call getreg	ld a,(ix+09)	ld (ix+01),apasvier pop af	ret; ---------------------------; victoireatt_won; ---------------------------	call iso_vier	jr z,norapa	ld a,(lord)	call lgetreg	ld b,a	ld a,(defending_region)	cp b	jr nz,nodegage	ld a,(lord)	call rapatrienodegage	call iso_prot	ld a,(defending_lord)	call z,rapatrienorapa	call iso_home	jr z,murder	call iso_vier	jr nz,wonpasv	call isa_jou	jr nz,wonpasv	ld a,(attack_lord)	call lgetarm	ex de,hl	ld hl,(armee)	or a	sbc hl,de	ld a,l	cp 1	ld de,homme	jr z,unseul	ld de,hommesunseul push de	push hl	ld hl,vasswin	ld a,5	call placardwonpasv	ld a,(defending_region)	ld c,a	ld a,(attack_lord)	ld b,a	call donne	ld a,(attack_lord)	call deplace	xor a	retmurder	ld a,(defending_lord)	ld b,a	ld a,(attack_lord)	ld c,a	call depouil	ld a,(defending_region)	ld c,a	ld a,(attack_lord)	call deplace	call isd_jou	jr nz,pasperdu	ld a,(defending_lord)	call kill	xor a	ld (iy+07),a	ld a,(defending_region)	call affreg	ld a,2	scf	retpasperdu	ld a,(defending_lord)	call kill	call isa_jou	jr nz,won_noj	ld a,(lord)	ld b,a	ld a,9chhate cp b	call nz,linchate	dec a	jr nz,chhate	ld a,(defending_lord)	call getlname	push hl	ld hl,lordead	ld a,7	call placard	ld c,5	 ;test dernier normandmvlastn ld a,c	call isdead	jr nz,mvnoend	inc c	ld a,10	cp c	jr nz,mvlastn	ld a,1	scf	retmvnoend	xor a	retwon_noj	ld a,(attack_lord)	call getlname	push hl	ld a,(defending_lord)	call getlname	push hl	ld hl,destroy	ld a,5	call placard	jr mvnoend; ---------------------------; defeatatt_lost; ---------------------------	call isa_jou	jr nz,lossnom	call iso_vier	jr nz,lossnom	ld hl,vltxt	ld a,5	call placardlossnom ld a,(attack_lord)	call rapatrie	xor a	ret; ---------------------------; retraiteatt_retr; ---------------------------	ld a,(attack_region)	call getrname	push hl	ld a,(attack_lord)	call getlname	push hl	ld hl,retraite	ld a,7	call placard	xor a	ret; ---------------------------wish; ---------------------------	ld hl,wishtxt	call menutext	call menurest	cp 2	ret; ---------------------------showcast; ---------------------------	add a,38	push af	LOAD_DECOMP_SCR scastle	ld hl,catspr	ld de,BUFSPRLOAD	call readfile	ld a,2		;catapulte	ld hl,256*64+57	call affspr	ld a,3		;soldats	ld hl,256*8+68	call affspr	ld a,4		;chevalier	ld hl,256*128+98	call affspr	ld hl,catanim	ld de,BUFSPRLOAD	call readfile	ld a,1	ld hl,256*80+58	call affspr	;panier	pop af	ld hl,256*82+123	call affspr;	ld a,4;	call bruit	call set_image_pal	call setflash	SET_GA_COLOR &09,&4c	ld a,6	jp wait_pause;;;fonctions de test;tamp ds 1;;attaquant=joueur?isa_jou	ld (tamp),a	ld a,(attack_lord)	call isjoueur	ld a,(tamp)	ret;defenseur=joueur?isd_jou	ld (tamp),a	ld a,(defending_lord)	call isjoueur	ld a,(tamp)	ret;objectif=vierge?iso_vier	ld (tamp),a	ld a,(defending_lord)	or a	ld a,(tamp)	ret;objectif sans building?iso_nob	ld (tamp),a	ld a,(defending_region)	call rgetbuil	or a	ld a,(tamp)	ret;objectif=home?iso_home	push bc	ld c,a	ld a,(defending_lord)	or a	jr nz,iso_hom0	ld a,1	or a	pop bc	retiso_hom0 call lgethome	ld b,a	ld a,(defending_region)	cp b	ld a,c	pop bc	ret;objectif=garnison?iso_garn	ld (tamp),a	ld a,(defending_region)	call rgetbuil	cp 3	ld a,(tamp)	ret;objectif has proprietary?iso_prot	ld (tamp),a	ld a,(defending_region)	call lordhere	ld a,(tamp)	ret;proprietaire pas loin de l'objectif?iso_near	ld (tamp),a	ld a,(defending_region)	call lordnear	ld a,0	jr c,iso_nea0	ld a,1iso_nea0 or a	ld a,(tamp)	ret	read "DoTC_Text_Attak.asm"